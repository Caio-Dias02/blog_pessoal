import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  // Hash da senha para o usu√°rio admin
  const hashedPassword = await bcrypt.hash('123456', 12);
  
  // Criar usu√°rio de teste
  const user = await prisma.user.upsert({
    where: { email: 'admin@blog.com' },
    update: {
      password: hashedPassword, // For√ßar atualiza√ß√£o da senha
    },
    create: {
      email: 'admin@blog.com',
      name: 'Admin Blog',
      password: hashedPassword,
      role: 'ADMIN',
      bio: 'Administrador do blog pessoal',
      avatar: 'https://blog-caio-dias.com/assets/profile.jpg',
    },
  });

  // Criar categorias
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { slug: 'tecnologia' },
      update: {},
      create: {
        name: 'Tecnologia',
        slug: 'tecnologia',
        description: 'Posts sobre tecnologia e desenvolvimento',
        color: '#3B82F6',
      },
    }),
    prisma.category.upsert({
      where: { slug: 'react' },
      update: {},
      create: {
        name: 'React',
        slug: 'react',
        description: 'Posts sobre React e desenvolvimento frontend',
        color: '#06B6D4',
      },
    }),
    prisma.category.upsert({
      where: { slug: 'nodejs' },
      update: {},
      create: {
        name: 'Node.js',
        slug: 'nodejs',
        description: 'Posts sobre Node.js e backend',
        color: '#10B981',
      },
    }),
  ]);

  // Criar tags
  const tags = await Promise.all([
    prisma.tag.upsert({
      where: { slug: 'javascript' },
      update: {},
      create: {
        name: 'JavaScript',
        slug: 'javascript',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'typescript' },
      update: {},
      create: {
        name: 'TypeScript',
        slug: 'typescript',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'react' },
      update: {},
      create: {
        name: 'React',
        slug: 'react',
      },
    }),
    prisma.tag.upsert({
      where: { slug: 'nestjs' },
      update: {},
      create: {
        name: 'NestJS',
        slug: 'nestjs',
      },
    }),
  ]);

  // Criar posts iniciais
  const posts = await Promise.all([
    prisma.post.upsert({
      where: { slug: 'introducao-ao-react' },
      update: {},
      create: {
        title: 'Introdu√ß√£o ao React',
        slug: 'introducao-ao-react',
        excerpt: 'Aprenda os conceitos b√°sicos do React de forma pr√°tica',
        content: `# Introdu√ß√£o ao React

React √© uma biblioteca JavaScript para construir interfaces de usu√°rio. Neste post, vamos explorar os conceitos fundamentais.

## Componentes

Os componentes s√£o a base do React. Eles permitem dividir a UI em partes reutiliz√°veis.

\`\`\`jsx
function Welcome(props) {
  return <h1>Ol√°, {props.name}!</h1>;
}
\`\`\`

## Estado

O estado permite que os componentes tenham dados que podem mudar ao longo do tempo.

Este √© um post introdut√≥rio para quem est√° come√ßando com React.`,
        published: true,
        featured: true,
        image: 'https://via.placeholder.com/800x400/61DAFB/000000?text=React',
        readTime: 8,
        seoTitle: 'Introdu√ß√£o ao React - Aprenda os B√°sicos',
        seoDescription: 'Guia completo para iniciantes em React. Aprenda componentes, estado e muito mais.',
        publishedAt: new Date(),
        authorId: user.id,
        categoryId: categories[1].id, // React
        tags: {
          connect: [
            { id: tags[0].id }, // JavaScript
            { id: tags[2].id }, // React
          ],
        },
      },
    }),
    prisma.post.upsert({
      where: { slug: 'criando-api-com-nestjs' },
      update: {},
      create: {
        title: 'Criando API REST com NestJS',
        slug: 'criando-api-com-nestjs',
        excerpt: 'Passo a passo para criar uma API robusta com NestJS e TypeScript',
        content: `# Criando API REST com NestJS

NestJS √© um framework progressivo para Node.js que utiliza TypeScript por padr√£o.

## Instala√ß√£o

\`\`\`bash
npm i -g @nestjs/cli
nest new projeto-api
\`\`\`

## Controllers

Os controllers s√£o respons√°veis por lidar com as requisi√ß√µes HTTP.

\`\`\`typescript
@Controller('posts')
export class PostsController {
  @Get()
  findAll() {
    return 'Todos os posts';
  }
}
\`\`\`

## Services

Os services cont√™m a l√≥gica de neg√≥cio da aplica√ß√£o.

Este post te ensina como criar APIs profissionais com NestJS.`,
        published: true,
        featured: false,
        image: 'https://via.placeholder.com/800x400/E0234E/FFFFFF?text=NestJS',
        readTime: 12,
        seoTitle: 'Como Criar API REST com NestJS e TypeScript',
        seoDescription: 'Tutorial completo para criar APIs robustas com NestJS, TypeScript e Prisma.',
        publishedAt: new Date(),
        authorId: user.id,
        categoryId: categories[2].id, // Node.js
        tags: {
          connect: [
            { id: tags[1].id }, // TypeScript
            { id: tags[3].id }, // NestJS
          ],
        },
      },
    }),
    prisma.post.upsert({
      where: { slug: 'typescript-para-iniciantes' },
      update: {},
      create: {
        title: 'TypeScript para Iniciantes',
        slug: 'typescript-para-iniciantes',
        excerpt: 'Descubra como TypeScript pode melhorar sua experi√™ncia com JavaScript',
        content: `# TypeScript para Iniciantes

TypeScript √© um superset do JavaScript que adiciona tipagem est√°tica.

## Por que usar TypeScript?

- ‚úÖ Detec√ß√£o de erros em tempo de compila√ß√£o
- ‚úÖ Melhor IntelliSense e autocompletar
- ‚úÖ Refatora√ß√£o mais segura
- ‚úÖ Documenta√ß√£o autom√°tica

## Tipos B√°sicos

\`\`\`typescript
let nome: string = "Jo√£o";
let idade: number = 30;
let ativo: boolean = true;
\`\`\`

## Interfaces

\`\`\`typescript
interface Usuario {
  id: number;
  nome: string;
  email: string;
}
\`\`\`

TypeScript torna o desenvolvimento JavaScript mais produtivo e seguro.`,
        published: true,
        featured: true,
        image: 'https://via.placeholder.com/800x400/3178C6/FFFFFF?text=TypeScript',
        readTime: 10,
        seoTitle: 'TypeScript para Iniciantes - Guia Completo',
        seoDescription: 'Aprenda TypeScript do zero com exemplos pr√°ticos e dicas essenciais.',
        publishedAt: new Date(),
        authorId: user.id,
        categoryId: categories[0].id, // Tecnologia
        tags: {
          connect: [
            { id: tags[0].id }, // JavaScript
            { id: tags[1].id }, // TypeScript
          ],
        },
      },
    }),
    prisma.post.upsert({
      where: { slug: 'post-em-rascunho' },
      update: {},
      create: {
        title: 'Post em Rascunho',
        slug: 'post-em-rascunho',
        excerpt: 'Este √© um post que ainda n√£o foi publicado',
        content: `# Post em Rascunho

Este post ainda est√° sendo escrito e n√£o foi publicado.

## Conte√∫do em desenvolvimento

Aqui teremos mais conte√∫do em breve...`,
        published: false, // N√£o publicado
        featured: false,
        readTime: 5,
        authorId: user.id,
        categoryId: categories[0].id, // Tecnologia
      },
    }),
  ]);

  console.log('‚úÖ Seed executado com sucesso!');
  console.log(`üë§ Usu√°rio criado: ${user.email}`);
  console.log(`üìö Categorias: ${categories.length}`);
  console.log(`üè∑Ô∏è Tags: ${tags.length}`);
  console.log(`üìù Posts: ${posts.length}`);
  console.log('\nüéØ IDs para testar:');
  console.log(`User ID: ${user.id}`);
  console.log(`Category IDs: ${categories.map(c => `${c.name}: ${c.id}`).join(', ')}`);
  console.log(`Tag IDs: ${tags.map(t => `${t.name}: ${t.id}`).join(', ')}`);
  console.log(`Post IDs: ${posts.map(p => `${p.title}: ${p.id}`).join(', ')}`);
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  }); 